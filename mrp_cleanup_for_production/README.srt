STOCK

stock.py
moves = self.browse(cr, uid, ids, context=context)
for move in moves:
    if move.state == 'done':
        if frozen_fields.intersection(vals):
            raise UserError(_(
                'Quantities, Units of Measure, Products and Locations cannot be modified on stock moves that have already been processed (except by the Administrator).'))

product.py
def write(self, cr, uid, ids, vals, context=None):
    if 'uom_id' in vals:
        new_uom = self.pool.get('product.uom').browse(cr, uid, vals['uom_id'], context=context)
        for product in self.browse(cr, uid, ids, context=context):
            old_uom = product.uom_id
            if old_uom != new_uom:
                if self.pool.get('stock.move').search(cr, uid, [
                    ('product_id', 'in', [x.id for x in product.product_variant_ids]), ('state', '=', 'done')], limit=1,
                                                      context=context):
                    raise UserError(_(
                        "You can not change the unit of measure of a product that has already been used in a done stock move. If you need to change the unit of measure, you may deactivate this product."))
   return super(product_template, self).write(cr, uid, ids, vals, context=context)

ACCOUNT

product.py
    @api.multi
    def write(self, vals):
        #TODO: really? i don't see the reason we'd need that constraint..
        check = self.ids and 'uom_po_id' in vals
        if check:
            self._cr.execute("SELECT id, uom_po_id FROM product_template WHERE id IN %s", [tuple(self.ids)])
            uoms = dict(self._cr.fetchall())
        res = super(ProductTemplate, self).write(vals)
        if check:
            self._cr.execute("SELECT id, uom_po_id FROM product_template WHERE id IN %s", [tuple(self.ids)])
            if dict(self._cr.fetchall()) != uoms:
                products = self.env['product.product'].search([('product_tmpl_id', 'in', self.ids)])
                if self.env['account.move.line'].search_count([('product_id', 'in', products.ids)]):
                    raise UserError(_('You can not change the unit of measure of a product that has been already used in an account journal item. If you need to change the unit of measure, you may deactivate this product.'))
        return res